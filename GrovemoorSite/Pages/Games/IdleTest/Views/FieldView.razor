@using GrovemoorSite.Pages.Games.IdleTest.Components
@using GrovemoorSite.Pages.Games.IdleTest.Models

<div>
    <h3>FieldView</h3>
    <div>
        <p>
            Selected crop: @AutoLoad.Crops[_selectedCrop].Name 
        </p>
        <span class="material-symbols-outlined">
            @AutoLoad.Items[_selectedCrop].Icon
        </span>
    </div>
    <div>
        <p>Fields: @_fieldTask.Count /  @_maxFields</p>
        <button @onclick="_plantField">Plant new field</button>
    </div>
    <div>
        @foreach(ActiveTask task in _fieldTask)
        {
            <Field @ref="FieldHelper" OnTaskFinished="ClearField" CurrentTask="task"></Field>
        }
    </div>
</div>


@code {
    [Parameter]
    public Timer TickTimer { get; set; } = new();
    private int _maxFields = 5;
    private List<ActiveTask> _fieldTask = new()
    {
        new("Tomato",250, () => Inventory.AddItem(ItemType.Tomato), new(){ { ItemType.Seed , 1}})
    };
    private ItemType _selectedCrop = ItemType.Tomato;
    private List<Field> _fields = new();
    private Field FieldHelper { set { _fields.Add(value);}}

    protected override void OnParametersSet()
    {
        TickTimer.Elapsed += OnTick;
    }


    private void OnTick(object? source, ElapsedEventArgs e)
    {
        foreach (var field in _fields)
        {
            field.OnTick();
        }
        StateHasChanged();
    }

    private void _plantField()
    {
        if (_fields.Count < _maxFields)
        {
            var seedItem = AutoLoad.Crops[_selectedCrop];
            _fieldTask.Add(new(seedItem.Name,seedItem.GrowTime, () => Inventory.AddItem(_selectedCrop), new(){ { ItemType.Seed , 1}}));
        }
    }

    private void ClearField(Field field)
    {
        _fields.Remove(field);
    }
}
