@using GrovemoorSite.Pages.Games.IdleTest.Components
@using GrovemoorSite.Pages.Games.IdleTest.Models

<div>
    <h3>FieldView</h3>
    <div>
        <p>
            Selected crop: @AutoLoad.Items[_selectedCrop].Name 
        </p>
        <span class="material-symbols-outlined">
            @AutoLoad.Items[_selectedCrop].Icon
        </span>
    </div>
    <div>
        <p>Fields: @_fieldTasks.Count /  @_maxFields</p>
        <button @onclick="_plantField">Plant new field</button>
    </div>
    <div>
        @foreach(ActiveTask task in _fieldTasks)
        {
            <Field @ref="FieldHelper" OnTaskFinished="ClearField" CurrentTask="task"></Field>
        }
    </div>
</div>


@code {







    [Parameter]
    public Timer TickTimer { get; set; } = new();
    private int _maxFields = 5;
    private int _newFieldCost = 5;
    private List<ActiveTask> _fieldTasks = new();
    private ItemType _selectedCrop = ItemType.Tomato;
    private List<Field> _fields = new();
    private Field FieldHelper { set { _fields.Add(value);}}

    protected override void OnParametersSet()
    {
        TickTimer.Elapsed += OnTick;
    }

    private void OnTick(object? source, ElapsedEventArgs e)
    {
        foreach (var field in _fields)
        {
            field.OnTick();
        }
        StateHasChanged();
    }

    private void _plantField()
    {

        if (_fieldTasks.Count < _maxFields && Inventory.Money >= _newFieldCost * (_fieldTasks.Count + 1))
        {

            Inventory.Money -= _newFieldCost * (_fieldTasks.Count + 1);
            var seedItem = AutoLoad.Items[_selectedCrop];
            _fieldTasks.Add(new(seedItem.Name,seedItem.GrowTime, () => Inventory.AddItem(_selectedCrop), cost: new(){ { ItemType.Seed , 1}}, repeatable: true));
        }
    }

    private void ClearField(Field field, ActiveTask task)
    {
        Console.WriteLine($"Fields: {_fields.Count} | Tasks: {_fieldTasks.Count}");
        _fieldTasks.Remove(task);
        _fields.Remove(field);
        Console.WriteLine($"Fields: {_fields.Count} | Tasks: {_fieldTasks.Count}");
    }
}
