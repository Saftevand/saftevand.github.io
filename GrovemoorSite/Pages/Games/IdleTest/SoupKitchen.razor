@using GrovemoorSite.Pages.Games.IdleTest.Models
@using GrovemoorSite.Pages.Games.IdleTest.Views
@using GrovemoorSite.Pages.Games.IdleTest.Components

@page "/SoupKitchen"
<div class="w-full h-full relative">
    <div class="w-full p-2">
        @_tickCounter | 
        <div class="flex flex-row">
            <span class="material-symbols-outlined">
                universal_currency_alt
            </span>
            @Inventory.Money
        </div>
    </div>
    <hr />
    <div class="flex flex-row gap-4 border-2">
        <button @onclick="@(() => _currentView = ViewType.Overview)">
            <span class="material-symbols-outlined">
                dashboard_2
            </span>
            Overview
        </button>
        <button @onclick="@(() => _currentView = ViewType.Inventory)">
            <span class="material-symbols-outlined">
                shelves
            </span>
            Inventory
        </button>
        <button @onclick="@(() => _currentView = ViewType.Field)">
            <span class="material-symbols-outlined">
                grass
            </span>
            Field
        </button>
        <button @onclick="@(() => _currentView = ViewType.Kitchen)">
            <span class="material-symbols-outlined">
                soup_kitchen
            </span>
            Kitchen
        </button>
        <button @onclick="@(() => _currentView = ViewType.Market)">
            <span class="material-symbols-outlined">
                storefront
            </span>
            Market
        </button>
    </div>
    <hr />

    <div class="@(_currentView == ViewType.Overview ? "" : "hidden")">
        <OverviewView/>
    </div>
    <div class="@(_currentView == ViewType.Inventory ? "" : "hidden")">
        <InventoryView TickTimer="_tickTimer" />
    </div>
    <div class="@(_currentView == ViewType.Field ? "" : "hidden")">
        <FieldView TickTimer="_tickTimer"  />
    </div>
    <div class="@(_currentView == ViewType.Kitchen ? "" : "hidden")">
        <KitchenView />
    </div>
    <div class="@(_currentView == ViewType.Market ? "" : "hidden")">
        <MarketView />
    </div>

    <ActiveTaskContainer TickTimer="_tickTimer" CurrentTask="CurrentTask"></ActiveTaskContainer>
</div>



@code {
    private Timer _tickTimer = new();
    public ActiveTask CurrentTask = new("Test Task",250, () => Inventory.AddItem(ItemType.Seed), new());
    private ViewType _currentView = ViewType.Overview;
    private int _tickCounter = 0;


    protected override void OnInitialized()
    {
        _tickTimer.Interval = 100;
        _tickTimer.Elapsed += OnTick();
        _tickTimer.AutoReset = true;
        _tickTimer.Enabled = true;
        _tickTimer.Start();
    }

    private ElapsedEventHandler OnTick()
    {
        _tickCounter++;
        Console.WriteLine(_tickCounter.ToString() + " | " + _tickTimer.ToString() + DateTime.Now.ToString());
        return null!;
    }
}