@page "/SoupKitchen"
@using System.Runtime.CompilerServices
@using GrovemoorSite.Pages.Games.IdleTest.Models
@using GrovemoorSite.Pages.Games.IdleTest.Views
@using System.Timers;
@using GrovemoorSite.Pages.Games.IdleTest.Components


<div class="w-full p-2">
    @_tickCounter | 
    <div class="flex flex-row">
        <span class="material-symbols-outlined">
            universal_currency_alt
        </span>
        @_inventory.Money
    </div>
</div>
<hr />
<div class="flex flex-row gap-4 border-2">
    <button @onclick="@(() => _currentView = ViewType.Overview)">
        <span class="material-symbols-outlined">
            dashboard_2
        </span>
        Overview
    </button>
    <button @onclick="@(() => _currentView = ViewType.Inventory)">
        <span class="material-symbols-outlined">
            shelves
        </span>
        Inventory
    </button>
    <button @onclick="@(() => _currentView = ViewType.Field)">
        <span class="material-symbols-outlined">
            grass
        </span>
        Field
    </button>
    <button @onclick="@(() => _currentView = ViewType.Kitchen)">
        <span class="material-symbols-outlined">
            soup_kitchen
        </span>
        Kitchen
    </button>
    <button @onclick="@(() => _currentView = ViewType.Market)">
        <span class="material-symbols-outlined">
            storefront
        </span>
        Market
    </button>
</div>
<hr />

@if (_currentView == ViewType.Overview)
{
    <OverviewView Inventory="_inventory"  />
}
@if (_currentView == ViewType.Inventory)
{
    <InventoryView Inventory="_inventory"  />
}
@if (_currentView == ViewType.Field)
{
    <FieldView Inventory="_inventory" TickTimer="_tickTimer"  />
}
@if (_currentView == ViewType.Kitchen)
{
    <KitchenView Inventory="_inventory"  />
}
@if (_currentView == ViewType.Market)
{
    <MarketView Inventory="_inventory"  />
}

<ActiveTaskContainer TickTimer="_tickTimer" CurrentTask="CurrentTask"></ActiveTaskContainer>



@code {
    private static Inventory _inventory = new();
    private Timer _tickTimer { get; set; } = new();
    public ActiveTask CurrentTask = new("Test Task",500, () => _inventory.AddItem(ItemType.Seed));
    private ViewType _currentView = ViewType.Overview;
    private int _tickCounter = 0;
    

    protected override void OnInitialized()
    {
        _tickTimer.Interval = 100;
        _tickTimer.Elapsed += OnTick();
        _tickTimer.AutoReset = true;
        _tickTimer.Enabled = true;
    }

    private ElapsedEventHandler OnTick()
    {
        _tickCounter++;
        return null!;
    }
}